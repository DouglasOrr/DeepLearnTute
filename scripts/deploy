#!/usr/bin/env python3

import os
import subprocess
import string
import argparse


def prepare(args):
    '''Create logins & initialize user home directories.
    '''
    if not os.path.isdir(args.work):
        os.makedirs(args.work)

    with open(os.path.join(args.work, 'users.txt'), 'w') as f:
        for user in args.user:
            # Add the user to the list
            f.write('U:U::::/work/U:\n'.replace('U', user))

            # Create a home directory locally
            home = os.path.join(args.work, user)
            if not os.path.isdir(home):
                os.makedirs(home)

            # Copy in a tutorial notebook from Docker
            subprocess.check_call(string.Template(
                'docker run --rm -it -v ${WORK}:/work ${IMAGE}'
                ' sh -c "cp /examples/*.ipynb /work/${USER}'
                ' && chmod -R ugo+rw /work/${USER}"'
            ).substitute(WORK=os.path.abspath(args.work),
                         USER=user,
                         IMAGE=args.image),
                                  shell=True)


def start(args):
    '''Start a notebook server.
    '''
    if args.restart:
        subprocess.check_call('docker rm -f dlt-notebook || true',
                              shell=True)

    subprocess.check_call(string.Template(
        'docker run --detach --name dlt-notebook -p 80:80'
        ' -e "OPENBLAS_NUM_THREADS=${NTHREADS}"'
        ' -v ${WORK}:/work -w /work' +
        (' -v $$(pwd):/app -e "PYTHONPATH=/app"' if args.dev else '') +
        ' ${IMAGE} sh -c "newusers < users.txt'
        ' ; jupyterhub --port 80 --ip=*'
        ' -f /etc/jupyterhub/jupyterhub_config.py"'
    ).substitute(NTHREADS=args.num_threads,
                 WORK=os.path.abspath(args.work),
                 IMAGE=args.image),
                          shell=True)


parser = argparse.ArgumentParser(
    description='Manage & start JupyterHub servers')
parser.add_argument('--work', type=str, default='work',
                    help='Working directory (local) to use')
parser.add_argument('--image', type=str,
                    default='douglasorr/deep-learn-tute:latest',
                    help='Docker image to use')
subparsers = parser.add_subparsers()

parser_prepare = subparsers.add_parser('prepare')
parser_prepare.set_defaults(action=prepare)
parser_prepare.add_argument('user', nargs='+', type=str)

parser_start = subparsers.add_parser('start')
parser_start.add_argument('-r', '--restart', action='store_true',
                          help='Restart if already running')
parser_start.add_argument('--dev', action='store_true',
                          help='Forward the current directory into the'
                          ' container, at /app')
parser_start.add_argument('-n', '--num-threads', default=2,
                          help='Number of OPENBLAS threads to use')
parser_start.set_defaults(action=start)

args = parser.parse_args()
if hasattr(args, 'action'):
    args.action(args)
else:
    parser.print_help()
